# handlers/user.py

import logging
from aiogram import Router, F, Bot
from aiogram.filters import CommandStart
from aiogram.types import (
    Message,
    CallbackQuery,
    LabeledPrice,
    PreCheckoutQuery,
    SuccessfulPayment,
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime, timedelta
import asyncio

# --- –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ ---
from keyboards.user_kb import (
    main_menu_kb,
    get_courses_list_kb,
    get_course_details_kb,
    CourseCallbackFactory,
)
from models import users as users_db
from models import courses as courses_db
from models import payments as payments_db
from models import user_courses as user_courses_db
from config import PAYMENT_PROVIDER_TOKEN

user_router = Router()


@user_router.message(CommandStart())
async def handle_start(message: Message):
    user = message.from_user
    await users_db.add_user(
        user_id=user.id, username=user.username, full_name=user.full_name
    )
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç –æ–Ω–ª–∞–π–Ω-–∫—É—Ä—Å–æ–≤.",
        reply_markup=main_menu_kb,
    )


@user_router.message(F.text == "üéì –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã")
async def handle_catalog(message: Message):
    courses = await courses_db.get_all_courses()
    if not courses:
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤.")
        return
    await message.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã:", reply_markup=get_courses_list_kb(courses))


@user_router.callback_query(CourseCallbackFactory.filter(F.action == "view"))
async def show_course_details(
    callback: CallbackQuery, callback_data: CourseCallbackFactory
):
    course_id = callback_data.course_id
    course = await courses_db.get_course_by_id(course_id)
    if course:
        _, title, _, full_desc, price, _ = course
        text = f"üéì **{title}**\n\n{full_desc}\n\nüí∞ **–¶–µ–Ω–∞:** {price} —Ä—É–±."
        await callback.message.edit_text(
            text, reply_markup=get_course_details_kb(course_id), parse_mode="Markdown"
        )
    else:
        await callback.answer("–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
    await callback.answer()


# --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –¢–ê–ô–ú–ï–†–ê ---
async def expire_invoice_message(
    bot: Bot, chat_id: int, message_id: int, payment_id: int
):
    """
    –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏ —É–¥–∞–ª—è–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π —Å—á–µ—Ç.
    """
    # –ñ–¥—ë–º 10 –º–∏–Ω—É—Ç, –ø–æ–∫–∞ —Å—á–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω
    await asyncio.sleep(600)  # 600 —Å–µ–∫—É–Ω–¥ = 10 –º–∏–Ω—É—Ç

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ –Ω–∞—à–µ–π –ë–î
    payment_info = await payments_db.get_payment_info(payment_id)

    # –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –≤—Å–µ –µ—â–µ –≤ —Å—Ç–∞—Ç—É—Å–µ 'pending' (–Ω–µ –æ–ø–ª–∞—á–µ–Ω)
    if payment_info and payment_info["status"] == "pending":
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ 'canceled'
            await payments_db.update_payment_status(payment_id, "canceled")

            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–≤–æ–π—Å–æ–º
            await bot.delete_message(chat_id=chat_id, message_id=message_id)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await bot.send_message(
                chat_id=chat_id,
                text="‚ùå **–í—Ä–µ–º—è –¥–ª—è –æ–ø–ª–∞—Ç—ã –∏—Å—Ç–µ–∫–ª–æ!**\n\n–î–ª—è –ø–æ–∫—É–ø–∫–∏ –∫—É—Ä—Å–∞ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Å—á–µ—Ç.",
                parse_mode="Markdown",
            )
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")


# --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –•–ï–ù–î–õ–ï–† –ü–û–ö–£–ü–ö–ò ---
@user_router.callback_query(CourseCallbackFactory.filter(F.action == "buy"))
async def buy_course_handler(
    callback: CallbackQuery, callback_data: CourseCallbackFactory, bot: Bot
):
    await callback.answer()

    course_id = callback_data.course_id
    course = await courses_db.get_course_by_id(course_id)

    if not course:
        await callback.message.answer("–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    _, title, short_desc, _, price, _ = course
    user_id = callback.from_user.id

    payment_id = await payments_db.create_pending_payment(user_id, course_id, price)
    if not payment_id:
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞.")
        return

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–≤–æ–π—Å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ Message ID
        invoice_message = await bot.send_invoice(
            chat_id=user_id,
            title=title,
            description=short_desc,
            payload=f"payment_{payment_id}",
            provider_token=PAYMENT_PROVIDER_TOKEN,
            currency="RUB",
            prices=[
                LabeledPrice(label=f"–ü–æ–∫—É–ø–∫–∞ –∫—É—Ä—Å–∞: {title}", amount=int(price * 100))
            ],
        )

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç
        asyncio.create_task(
            expire_invoice_message(
                bot, invoice_message.chat.id, invoice_message.message_id, payment_id
            )
        )
    except Exception as e:
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—á–µ—Ç–∞.")
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω–≤–æ–π—Å–∞: {e}")


# --- –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
@user_router.pre_checkout_query()
async def process_pre_checkout(pre_checkout_query: PreCheckoutQuery, bot: Bot):
    payload = pre_checkout_query.invoice_payload
    try:
        payment_id = int(payload.split("_")[1])
    except (ValueError, IndexError):
        await bot.answer_pre_checkout_query(
            pre_checkout_query.id, ok=False, error_message="–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–ª–∞—Ç–µ–∂–∞."
        )
        return

    payment_info = await payments_db.get_payment_info(payment_id)

    if not payment_info or payment_info["status"] == "canceled":
        await bot.answer_pre_checkout_query(
            pre_checkout_query.id,
            ok=False,
            error_message="–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å—á–µ—Ç–∞ –∏—Å—Ç–µ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Å—á–µ—Ç.",
        )
        return

    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


@user_router.message(F.successful_payment)
async def process_successful_payment(message: Message):
    payment_id = int(message.successful_payment.invoice_payload.split("_")[1])

    payment_info = await payments_db.get_payment_info(payment_id)
    if not payment_info:
        logging.error(
            f"–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ {payment_id} –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã."
        )
        return

    user_id = payment_info["user_id"]
    course_id = payment_info["course_id"]

    await payments_db.update_payment_status(payment_id, "succeeded")
    await user_courses_db.add_user_course(user_id, course_id)

    await message.answer(
        "‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í–∞–º –æ—Ç–∫—Ä—ã—Ç –¥–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –µ–≥–æ –≤ —Ä–∞–∑–¥–µ–ª–µ 'üìö –ú–æ–∏ –∫—É—Ä—Å—ã'."
    )
    logging.info(f"–ü–ª–∞—Ç–µ–∂ {payment_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")


@user_router.callback_query(CourseCallbackFactory.filter(F.action == "back_to_list"))
async def back_to_courses_list(callback: CallbackQuery):
    courses = await courses_db.get_all_courses()
    await callback.message.edit_text(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã:", reply_markup=get_courses_list_kb(courses)
    )
    await callback.answer()


@user_router.message(F.text == "üìö –ú–æ–∏ –∫—É—Ä—Å—ã")
async def handle_my_courses(message: Message):
    user_id = message.from_user.id
    my_courses = await user_courses_db.get_user_courses_with_details(user_id)

    if not my_courses:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤.")
        return

    response_text = "üìö **–í–∞—à–∏ –∫—É—Ä—Å—ã:**\n\n"
    for course in my_courses:
        response_text += f"üéì **{course['title']}**\nüîó –°—Å—ã–ª–∫–∞ –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∫—É—Ä—Å–∞: {course['materials_link']}\n\n"

    await message.answer(
        response_text, parse_mode="Markdown", disable_web_page_preview=True
    )


@user_router.message(F.text == "üßæ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫")
async def handle_purchase_history(message: Message):
    user_id = message.from_user.id
    history = await payments_db.get_user_payment_history(user_id)

    if not history:
        await message.answer("–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫ –ø—É—Å—Ç–∞.")
        return

    response_text = "üßæ **–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –ø–æ–∫—É–ø–æ–∫:**\n\n"
    status_map = {
        "succeeded": "‚úÖ –£—Å–ø–µ—à–Ω–æ",
        "pending": "‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏",
        "canceled": "‚ùå –û—Ç–º–µ–Ω–µ–Ω",
    }
    for payment in history:
        status_emoji = status_map.get(payment["status"], "‚ùì")
        response_text += (
            f"**–ö—É—Ä—Å:** {payment['title']}\n"
            f"**–°—É–º–º–∞:** {payment['amount']} —Ä—É–±.\n"
            f"**–î–∞—Ç–∞:** {payment['payment_date']}\n"
            f"**–°—Ç–∞—Ç—É—Å:** {status_emoji}\n\n"
        )

    await message.answer(response_text, parse_mode="Markdown")
