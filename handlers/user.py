# handlers/user.py
from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

# --- –ò–º–ø–æ—Ä—Ç—ã ---
from keyboards.user_kb import (
    main_menu_kb,
    get_courses_list_kb,
    get_course_details_kb,
    CourseCallbackFactory,
)
from models import users as users_db
from models import courses as courses_db

from services import payments as payment_service
from models import payments as payments_db
from models import user_courses as user_courses_db


user_router = Router()


# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
@user_router.message(CommandStart())
async def handle_start(message: Message):
    user = message.from_user
    await users_db.add_user(
        user_id=user.id, username=user.username, full_name=user.full_name
    )
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç –æ–Ω–ª–∞–π–Ω-–∫—É—Ä—Å–æ–≤.",
        reply_markup=main_menu_kb,
    )


# –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫—É—Ä—Å–æ–≤
@user_router.message(F.text == "üéì –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã")
async def handle_catalog(message: Message):
    courses = await courses_db.get_all_courses()
    if not courses:
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤.")
        return
    await message.answer(
        "–í–æ—Ç –Ω–∞—à–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã:", reply_markup=get_courses_list_kb(courses)
    )


# –≠—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
@user_router.callback_query(CourseCallbackFactory.filter(F.action == "view"))
async def show_course_details(
    callback: CallbackQuery, callback_data: CourseCallbackFactory
):
    course_id = callback_data.course_id
    course = await courses_db.get_course_by_id(course_id)
    if course:
        _, title, short_desc, full_desc, price, link = course
        text = f"üéì **{title}**\n\n{full_desc}\n\nüí∞ **–¶–µ–Ω–∞:** {price} —Ä—É–±."
        await callback.message.edit_text(
            text, reply_markup=get_course_details_kb(course_id), parse_mode="Markdown"
        )
    else:
        await callback.answer("–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
    await callback.answer()


# –ö–Ω–æ–ø–∫–∞ –∫—É–ø–∏—Ç—å
@user_router.callback_query(CourseCallbackFactory.filter(F.action == "buy"))
async def buy_course_handler(
    callback: CallbackQuery, callback_data: CourseCallbackFactory
):
    course_id = callback_data.course_id
    course = await courses_db.get_course_by_id(course_id)

    if not course:
        await callback.answer("–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return

    _, title, _, _, price, _ = course
    user_id = callback.from_user.id

    payment_id = await payments_db.create_pending_payment(user_id, course_id, price)
    if not payment_id:
        await callback.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        await callback.answer()
        return

    metadata = {"–Ω–∞—à_–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π_id": payment_id}
    payment_url, yookassa_payment_id = await payment_service.create_payment(
        amount=price, description=f"–ü–æ–∫—É–ø–∫–∞ –∫—É—Ä—Å–∞: {title}", metadata=metadata
    )

    builder = InlineKeyboardBuilder()
    builder.button(text="‚û°Ô∏è –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url)

    await callback.message.edit_text(
        f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –∫—É–ø–∏—Ç—å –∫—É—Ä—Å ¬´**{title}**¬ª –∑–∞ **{price}** —Ä—É–±.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ.",
        reply_markup=builder.as_markup(),
        parse_mode="Markdown",
    )
    await callback.answer()


# –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫—É—Ä—Å–æ–≤
@user_router.callback_query(CourseCallbackFactory.filter(F.action == "back_to_list"))
async def back_to_courses_list(callback: CallbackQuery):
    courses = await courses_db.get_all_courses()
    await callback.message.edit_text(
        "–í–æ—Ç –Ω–∞—à–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã:", reply_markup=get_courses_list_kb(courses)
    )
    await callback.answer()


# –ú–æ–∏ –∫—É—Ä—Å—ã
@user_router.message(F.text == "üìö –ú–æ–∏ –∫—É—Ä—Å—ã")
async def handle_my_courses(message: Message):
    user_id = message.from_user.id
    my_courses = await user_courses_db.get_user_courses_with_details(user_id)

    if not my_courses:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤.")
        return

    response_text = "üìö **–í–∞—à–∏ –∫—É—Ä—Å—ã:**\n\n"
    for course in my_courses:
        response_text += f"üéì **{course['title']}**\nüîó –°—Å—ã–ª–∫–∞ –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã: {course['materials_link']}\n\n"

    await message.answer(
        response_text, parse_mode="Markdown", disable_web_page_preview=True
    )

# –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫

@user_router.message(F.text == "üßæ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫")
async def handle_purchase_history(message: Message):
    user_id = message.from_user.id
    history = await payments_db.get_user_payment_history(user_id)

    if not history:
        await message.answer("–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫ –ø—É—Å—Ç–∞.")
        return

    response_text = "üßæ **–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –ø–æ–∫—É–ø–æ–∫:**\n\n"
    status_map = {
        "succeeded": "‚úÖ –£—Å–ø–µ—à–Ω–æ",
        "pending": "‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏",
        "canceled": "‚ùå –û—Ç–º–µ–Ω–µ–Ω",
    }
    for payment in history:
        status_emoji = status_map.get(payment["status"], "‚ùì")
        response_text += (
            f"**–ö—É—Ä—Å:** {payment['title']}\n"
            f"**–°—É–º–º–∞:** {payment['amount']} —Ä—É–±.\n"
            f"**–î–∞—Ç–∞:** {payment['payment_date']}\n"
            f"**–°—Ç–∞—Ç—É—Å:** {status_emoji}\n\n"
        )

    await message.answer(response_text, parse_mode="Markdown")
