import html
import asyncpg
from typing import List, Dict
from aiogram import F, Bot, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from aiogram.utils.markdown import hbold, hcode, hlink

from filters.admin import IsAdmin
from keyboards.admin_kb import *
from models import courses as courses_db
from models import stats as stats_db
from models import users as users_db
from models import settings as settings_db
from states.admin_states import AddCourse, EditCourse, EditWelcomeMessage

admin_router = Router()


@admin_router.message(Command("admin"), IsAdmin())
async def admin_panel(message: Message):
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!", reply_markup=admin_main_kb
    )


@admin_router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_action(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=admin_main_kb)


@admin_router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫—É—Ä—Å", IsAdmin())
async def start_add_course(message: Message, state: FSMContext):
    await state.set_state(AddCourse.title)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫—É—Ä—Å–∞:", reply_markup=cancel_kb)


@admin_router.message(AddCourse.title)
async def process_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await state.set_state(AddCourse.short_description)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞:")


@admin_router.message(AddCourse.short_description)
async def process_short_description(message: Message, state: FSMContext):
    await state.update_data(short_description=message.text)
    await state.set_state(AddCourse.full_description)
    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–∏–≤ '-')"
    )


@admin_router.message(AddCourse.full_description)
async def process_full_description(message: Message, state: FSMContext):
    full_desc = message.text if message.text != "-" else ""
    await state.update_data(full_description=full_desc)
    await state.set_state(AddCourse.materials_link)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:")


@admin_router.message(AddCourse.materials_link)
async def process_materials_link(message: Message, state: FSMContext):
    await state.update_data(materials_link=message.text)
    await state.set_state(AddCourse.price)
    await message.answer(
        "–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ! –£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—Å–∞ –≤ —Ä—É–±–ª—è—Ö (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):"
    )


@admin_router.message(AddCourse.price)
async def process_price(message: Message, state: FSMContext, pool: asyncpg.Pool):
    try:
        price = float(message.text.replace(",", "."))
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1990.50).")
        return

    course_data = await state.get_data()
    await courses_db.add_course(
        pool,
        title=course_data["title"],
        short_desc=course_data["short_description"],
        full_desc=course_data["full_description"],
        link=course_data["materials_link"],
        price=price,
    )
    await state.clear()
    title = html.escape(course_data.get("title", ""))
    text = f"‚úÖ –ö—É—Ä—Å ¬´{hbold(title)}¬ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n–¶–µ–Ω–∞: {price} —Ä—É–±."
    await message.answer(text, reply_markup=admin_main_kb)


COURSES_PER_PAGE = 5


@admin_router.message(F.text == "üìã –°–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤", IsAdmin())
async def list_courses(message: Message, pool: asyncpg.Pool):
    total_courses = await courses_db.get_total_courses_count(pool)
    courses = await courses_db.get_paginated_courses(
        pool, limit=COURSES_PER_PAGE, offset=0
    )

    if not courses:
        await message.answer("–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    await message.answer(
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫—É—Ä—Å–∞–º–∏:",
        reply_markup=get_admin_courses_kb(
            courses, offset=0, total_courses=total_courses, page_size=COURSES_PER_PAGE
        ),
    )


@admin_router.callback_query(AdminCoursePaginationCallback.filter())
async def paginate_courses_list(
    callback: CallbackQuery,
    callback_data: AdminCoursePaginationCallback,
    pool: asyncpg.Pool,
):
    current_offset = callback_data.offset
    if callback_data.action == "next":
        new_offset = current_offset + COURSES_PER_PAGE
    else:
        new_offset = current_offset - COURSES_PER_PAGE

    total_courses = await courses_db.get_total_courses_count(pool)
    courses = await courses_db.get_paginated_courses(
        pool, limit=COURSES_PER_PAGE, offset=new_offset
    )

    await callback.message.edit_text(
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫—É—Ä—Å–∞–º–∏:",
        reply_markup=get_admin_courses_kb(
            courses,
            offset=new_offset,
            total_courses=total_courses,
            page_size=COURSES_PER_PAGE,
        ),
    )
    await callback.answer()


def _format_course_details_text(course: Dict, course_id: int, title_prefix: str) -> str:
    title = html.escape(course.get("title", ""))
    short_desc = html.escape(course.get("short_description", ""))
    full_desc = html.escape(course.get("full_description", ""))
    price = course.get("price", 0)
    link = hlink("–°—Å—ã–ª–∫–∞", course.get("materials_link", ""))
    is_active = course.get("is_active", False)
    status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if is_active else "üóÑÔ∏è –í –∞—Ä—Ö–∏–≤–µ"

    return (
        f"üìñ {hbold(title_prefix)}\n\n"
        f"{hbold('ID:')} {hcode(course_id)}\n"
        f"{hbold('–°—Ç–∞—Ç—É—Å:')} {status}\n"
        f"{hbold('–ù–∞–∑–≤–∞–Ω–∏–µ:')} {title}\n"
        f"{hbold('–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:')} {short_desc}\n"
        f"{hbold('–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:')} {full_desc}\n"
        f"{hbold('–¶–µ–Ω–∞:')} {price} —Ä—É–±.\n"
        f"{hbold('–°—Å—ã–ª–∫–∞:')} {link}"
    )


@admin_router.callback_query(AdminCourseCallback.filter(F.action == "view"))
async def view_course(
    callback: CallbackQuery, callback_data: AdminCourseCallback, pool: asyncpg.Pool
):
    await callback.answer()
    course_id = callback_data.course_id
    course = await courses_db.get_course_by_id(pool, course_id)
    if not course:
        await callback.answer("–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return

    text = _format_course_details_text(course, course_id, "–ü—Ä–æ—Å–º–æ—Ç—Ä –∫—É—Ä—Å–∞")

    is_active = course.get("is_active", False)
    reply_markup = (
        get_course_manage_kb(course_id)
        if is_active
        else get_archived_course_manage_kb(course_id)
    )

    await callback.message.edit_text(
        text,
        reply_markup=reply_markup,
        disable_web_page_preview=True,
    )


@admin_router.callback_query(AdminCourseCallback.filter(F.action == "delete"))
async def confirm_delete_course(
    callback: CallbackQuery, callback_data: AdminCourseCallback
):
    await callback.message.edit_text(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –∫—É—Ä—Å?",
        reply_markup=get_confirm_delete_kb(callback_data.course_id),
    )
    await callback.answer()


@admin_router.callback_query(AdminCourseCallback.filter(F.action == "confirm_delete"))
async def delete_course_confirmed(
    callback: CallbackQuery, callback_data: AdminCourseCallback, pool: asyncpg.Pool
):
    course_id = callback_data.course_id
    await courses_db.delete_course(pool, course_id)
    await callback.message.edit_text("‚úÖ –ö—É—Ä—Å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω.")
    await callback.answer()


@admin_router.callback_query(AdminCourseCallback.filter(F.action == "back_to_list"))
async def back_to_course_list_admin(callback: CallbackQuery, pool: asyncpg.Pool):
    total_courses = await courses_db.get_total_courses_count(pool)
    courses = await courses_db.get_paginated_courses(
        pool, limit=COURSES_PER_PAGE, offset=0
    )

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=get_admin_courses_kb(
            courses, offset=0, total_courses=total_courses, page_size=COURSES_PER_PAGE
        ),
    )
    await callback.answer()


@admin_router.callback_query(
    AdminCourseCallback.filter(F.action == "back_to_main_menu")
)
async def back_to_main_menu_admin(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=admin_main_kb
    )
    await callback.answer()


@admin_router.callback_query(AdminCourseCallback.filter(F.action == "edit"))
async def start_edit_course(
    callback: CallbackQuery, callback_data: AdminCourseCallback, state: FSMContext
):
    course_id = callback_data.course_id
    await state.set_state(EditCourse.choosing_field)
    await state.update_data(course_id=course_id)
    await callback.message.edit_text(
        "–ö–∞–∫–æ–µ –ø–æ–ª–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?",
        reply_markup=get_edit_field_kb(course_id),
    )
    await callback.answer()


@admin_router.callback_query(EditCourseCallback.filter(), EditCourse.choosing_field)
async def choose_field_to_edit(
    callback: CallbackQuery, callback_data: EditCourseCallback, state: FSMContext
):
    await callback.answer()
    field = callback_data.field
    field_names = {
        "title": "–Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ",
        "short_description": "–Ω–æ–≤–æ–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
        "full_description": "–Ω–æ–≤–æ–µ –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
        "materials_link": "–Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É",
        "price": "–Ω–æ–≤—É—é —Ü–µ–Ω—É",
    }
    await state.update_data(field_to_edit=field)
    await state.set_state(EditCourse.entering_new_value)
    await callback.message.delete()
    await callback.message.answer(
        f"–í–≤–µ–¥–∏—Ç–µ {field_names.get(field, '–Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')}:", reply_markup=cancel_kb
    )


@admin_router.message(EditCourse.entering_new_value)
async def process_new_value(message: Message, state: FSMContext, pool: asyncpg.Pool):
    new_value = message.text
    data = await state.get_data()
    course_id = data.get("course_id")
    field = data.get("field_to_edit")

    if field == "price":
        try:
            new_value = float(new_value.replace(",", "."))
        except ValueError:
            await message.answer(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1990.50)."
            )
            return

    await courses_db.update_course_field(pool, course_id, field, new_value)
    await state.clear()

    display_field_names = {
        "title": "–ù–∞–∑–≤–∞–Ω–∏–µ",
        "short_description": "–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
        "full_description": "–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
        "materials_link": "–°—Å—ã–ª–∫–∞",
        "price": "–¶–µ–Ω–∞",
    }
    display_name = display_field_names.get(field, field)
    text = f"‚úÖ –ü–æ–ª–µ {hbold(display_name)} –¥–ª—è –∫—É—Ä—Å–∞ {hbold('ID ' + str(course_id))} –±—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!"
    await message.answer(text, reply_markup=admin_main_kb)

    course = await courses_db.get_course_by_id(pool, course_id)
    if course:
        text = _format_course_details_text(course, course_id, "–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫—É—Ä—Å")
        await message.answer(
            text,
            reply_markup=get_course_manage_kb(course_id),
            disable_web_page_preview=True,
        )


@admin_router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", IsAdmin())
async def show_stats(message: Message, pool: asyncpg.Pool):
    stats = await stats_db.get_main_stats(pool)
    text = (
        f"üìä {hbold('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞')}\n\n"
        f"üë• {hbold('–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:')} {stats['users_count']}\n"
        f"üéì {hbold('–í—Å–µ–≥–æ –∫—É–ø–ª–µ–Ω–æ –∫—É—Ä—Å–æ–≤:')} {stats['purchases_count']}\n"
        f"üí∞ {hbold('–£—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π:')} {stats['successful_payments_count']} –Ω–∞ —Å—É–º–º—É {stats['total_revenue']:.2f} —Ä—É–±.\n"
        f"üìö {hbold('–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ –≤ –±–∞–∑–µ:')} {stats['active_courses_count']}"
    )
    await message.answer(text)


USERS_PER_PAGE = 5


async def format_users_list(users: List[Dict]) -> str:
    if not users:
        return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
    text = f"{hbold('üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:')}\n\n"
    for user in users:
        user_id = user["user_id"]
        full_name = html.escape(str(user["full_name"] or "–ë–µ–∑ –∏–º–µ–Ω–∏"))
        username = html.escape(str(user["username"] or "–ë–µ–∑ —é–∑–µ—Ä–Ω–µ–π–º–∞"))
        courses_purchased = user["courses_purchased"]
        text += (
            f"üë§ {hbold('ID:')} {hcode(user_id)}\n"
            f"   {hbold('–ò–º—è:')} {full_name}\n"
            f"   {hbold('Username:')} @{username}\n"
            f"   {hbold('–ö—É–ø–ª–µ–Ω–æ –∫—É—Ä—Å–æ–≤:')} {courses_purchased}\n"
            f"--------------------"
        )
    return text


@admin_router.message(F.text == "üë• –°–ø–∏—Å–æ–∫ —é–∑–µ—Ä–æ–≤", IsAdmin())
async def list_users(message: Message, pool: asyncpg.Pool):
    total_users = await users_db.get_total_users_count(pool)
    users = await users_db.get_paginated_users(pool, limit=USERS_PER_PAGE, offset=0)
    text = await format_users_list(users)
    await message.answer(
        text,
        reply_markup=get_users_pagination_kb(
            offset=0, total_users=total_users, page_size=USERS_PER_PAGE
        ),
    )


@admin_router.callback_query(UserPaginationCallback.filter())
async def paginate_users_list(
    callback: CallbackQuery, callback_data: UserPaginationCallback, pool: asyncpg.Pool
):
    current_offset = callback_data.offset
    if callback_data.action == "next":
        new_offset = current_offset + USERS_PER_PAGE
    else:
        new_offset = current_offset - USERS_PER_PAGE
    total_users = await users_db.get_total_users_count(pool)
    users = await users_db.get_paginated_users(
        pool, limit=USERS_PER_PAGE, offset=new_offset
    )
    text = await format_users_list(users)
    await callback.message.edit_text(
        text,
        reply_markup=get_users_pagination_kb(
            offset=new_offset, total_users=total_users, page_size=USERS_PER_PAGE
        ),
    )
    await callback.answer()


@admin_router.message(F.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ", IsAdmin())
async def start_edit_welcome_message(
    message: Message, state: FSMContext, pool: asyncpg.Pool
):
    current_welcome_message = await settings_db.get_setting(pool, "welcome_message")
    if current_welcome_message:
        await message.answer(
            f"–¢–µ–∫—É—â–µ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ:\n\n{current_welcome_message}\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
            reply_markup=cancel_kb,
        )
    else:
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ.",
            reply_markup=cancel_kb,
        )
    await state.set_state(EditWelcomeMessage.entering_message)


@admin_router.message(EditWelcomeMessage.entering_message)
async def process_new_welcome_message(
    message: Message, state: FSMContext, pool: asyncpg.Pool
):
    await settings_db.set_setting(pool, "welcome_message", message.text)
    await state.clear()
    await message.answer(
        "‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
        reply_markup=admin_main_kb,
    )


@admin_router.message(F.text == "üóÑÔ∏è –ê—Ä—Ö–∏–≤ –∫—É—Ä—Å–æ–≤", IsAdmin())
async def list_archived_courses(message: Message, pool: asyncpg.Pool):
    total_courses = await courses_db.get_total_archived_courses_count(pool)
    courses = await courses_db.get_paginated_archived_courses(
        pool, limit=COURSES_PER_PAGE, offset=0
    )

    if not courses:
        await message.answer("–í –∞—Ä—Ö–∏–≤–µ –ø–æ–∫–∞ –Ω–µ—Ç –∫—É—Ä—Å–æ–≤.")
        return

    await message.answer(
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—Ä—Ö–∏–≤–Ω—ã–º–∏ –∫—É—Ä—Å–∞–º–∏:",
        reply_markup=get_admin_archived_courses_kb(  # –ù—É–∂–Ω–∞ –Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            courses, offset=0, total_courses=total_courses, page_size=COURSES_PER_PAGE
        ),
    )


@admin_router.callback_query(
    AdminArchivedCoursePaginationCallback.filter()
)  # –ù—É–∂–µ–Ω –Ω–æ–≤—ã–π CallbackFactory
async def paginate_archived_courses_list(
    callback: CallbackQuery,
    callback_data: AdminArchivedCoursePaginationCallback,
    pool: asyncpg.Pool,
):
    current_offset = callback_data.offset
    if callback_data.action == "next":
        new_offset = current_offset + COURSES_PER_PAGE
    else:
        new_offset = current_offset - COURSES_PER_PAGE

    total_courses = await courses_db.get_total_archived_courses_count(pool)
    courses = await courses_db.get_paginated_archived_courses(
        pool, limit=COURSES_PER_PAGE, offset=new_offset
    )

    await callback.message.edit_text(
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—Ä—Ö–∏–≤–Ω—ã–º–∏ –∫—É—Ä—Å–∞–º–∏:",
        reply_markup=get_admin_archived_courses_kb(
            courses,
            offset=new_offset,
            total_courses=total_courses,
            page_size=COURSES_PER_PAGE,
        ),
    )
    await callback.answer()


@admin_router.callback_query(AdminCourseCallback.filter(F.action == "restore"))
async def restore_course(
    callback: CallbackQuery, callback_data: AdminCourseCallback, pool: asyncpg.Pool
):
    course_id = callback_data.course_id
    await courses_db.update_course_field(pool, course_id, "is_active", True)
    await callback.message.edit_text(
        f"‚úÖ –ö—É—Ä—Å —Å ID {course_id} —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ –∞—Ä—Ö–∏–≤–∞!"
    )
    await callback.answer()


@admin_router.callback_query(
    AdminCourseCallback.filter(F.action == "back_to_archive_list")
)
async def back_to_archive_list_admin(callback: CallbackQuery, pool: asyncpg.Pool):
    await callback.answer()
    total_courses = await courses_db.get_total_archived_courses_count(pool)
    courses = await courses_db.get_paginated_archived_courses(
        pool, limit=COURSES_PER_PAGE, offset=0
    )

    if not courses:
        await callback.message.edit_text("–í –∞—Ä—Ö–∏–≤–µ –ø–æ–∫–∞ –Ω–µ—Ç –∫—É—Ä—Å–æ–≤.")
        return

    await callback.message.edit_text(
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—Ä—Ö–∏–≤–Ω—ã–º–∏ –∫—É—Ä—Å–∞–º–∏:",
        reply_markup=get_admin_archived_courses_kb(
            courses, offset=0, total_courses=total_courses, page_size=COURSES_PER_PAGE
        ),
    )
