# handlers/admin.py

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from typing import List, Dict

from filters.admin import IsAdmin
from keyboards.admin_kb import (
    admin_main_kb,
    cancel_kb,
    get_admin_courses_kb,
    get_course_manage_kb,
    AdminCourseCallback,
    get_edit_field_kb,
    EditCourseCallback,
    UserPaginationCallback,
    get_users_pagination_kb,
)
from states.admin_states import AddCourse
from states.admin_states import EditCourse
from models import users as users_db
from models import courses as courses_db
from models import stats as stats_db

admin_router = Router()


@admin_router.message(Command("admin"), IsAdmin())
async def admin_panel(message: Message):
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!", reply_markup=admin_main_kb
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
@admin_router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_action(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç –ª—é–±–æ–µ —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    current_state = await state.get_state()
    if current_state is None:
        return

    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=admin_main_kb)


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞
@admin_router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫—É—Ä—Å", IsAdmin())
async def start_add_course(message: Message, state: FSMContext):
    await state.set_state(AddCourse.title)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫—É—Ä—Å–∞:", reply_markup=cancel_kb)


# –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
@admin_router.message(AddCourse.title)
async def process_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await state.set_state(AddCourse.short_description)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞:")


# –ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
@admin_router.message(AddCourse.short_description)
async def process_short_description(message: Message, state: FSMContext):
    await state.update_data(short_description=message.text)
    await state.set_state(AddCourse.full_description)
    await message.answer(
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–∏–≤ '-')"
    )


# –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É
@admin_router.message(AddCourse.full_description)
async def process_full_description(message: Message, state: FSMContext):
    full_desc = message.text if message.text != "-" else ""
    await state.update_data(full_description=full_desc)
    await state.set_state(AddCourse.materials_link)
    await message.answer("–ü—Ä–∏–Ω—è—Ç–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:")


# –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É
@admin_router.message(AddCourse.materials_link)
async def process_materials_link(message: Message, state: FSMContext):
    await state.update_data(materials_link=message.text)
    await state.set_state(AddCourse.price)
    await message.answer(
        "–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ! –£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—Å–∞ –≤ —Ä—É–±–ª—è—Ö (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):"
    )


# –°–æ—Ö—Ä–∞–Ω—è–µ–º
@admin_router.message(AddCourse.price)
async def process_price(message: Message, state: FSMContext):
    try:
        price = float(message.text.replace(",", "."))
    except ValueError:
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1990.50)."
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
    course_data = await state.get_data()
    await courses_db.add_course(
        title=course_data["title"],
        short_desc=course_data["short_description"],
        full_desc=course_data["full_description"],
        link=course_data["materials_link"],
        price=price,
    )

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await state.clear()
    await message.answer(
        f"‚úÖ **–ö—É—Ä—Å ¬´{course_data['title']}¬ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!**\n\n"
        f"–¶–µ–Ω–∞: {price} —Ä—É–±.",
        reply_markup=admin_main_kb,
        parse_mode="Markdown",
    )


# –°–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤
@admin_router.message(F.text == "üìã –°–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤", IsAdmin())
async def list_courses(message: Message):
    all_courses = await courses_db.get_all_courses()
    if not all_courses:
        await message.answer("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç –∫—É—Ä—Å–æ–≤.")
        return

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", reply_markup=get_admin_courses_kb(all_courses)
    )


# # –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç , —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏–ª–∏ —É–¥–∞–ª—è–µ–º –∫—É—Ä—Å
@admin_router.callback_query(AdminCourseCallback.filter(F.action == "view"))
async def view_course(callback: CallbackQuery, callback_data: AdminCourseCallback):
    course_id = callback_data.course_id
    course = await courses_db.get_course_by_id(course_id)

    if not course:
        await callback.answer("–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return

    _, title, short_desc, full_desc, price, link = course

    text = (
        f"üìñ **–ü—Ä–æ—Å–º–æ—Ç—Ä –∫—É—Ä—Å–∞**\n\n"
        f"**ID:** {course_id}\n"
        f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {title}\n"
        f"**–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:** {short_desc}\n"
        f"**–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:** {full_desc}\n"
        f"**–¶–µ–Ω–∞:** {price} —Ä—É–±.\n"
        f"**–°—Å—ã–ª–∫–∞:** {link}"
    )

    await callback.message.edit_text(
        text,
        reply_markup=get_course_manage_kb(course_id),
        parse_mode="Markdown",
        disable_web_page_preview=True,
    )
    await callback.answer()


# –£–¥–∞–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞
@admin_router.callback_query(AdminCourseCallback.filter(F.action == "delete"))
async def confirm_delete_course(
    callback: CallbackQuery, callback_data: AdminCourseCallback
):
    course_id = callback_data.course_id
    await courses_db.delete_course(course_id)

    await callback.message.edit_text("–ö—É—Ä—Å –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
    await callback.answer("–ö—É—Ä—Å —É–¥–∞–ª–µ–Ω", show_alert=True)


# –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
@admin_router.callback_query(AdminCourseCallback.filter(F.action == "edit"))
async def start_edit_course(
    callback: CallbackQuery, callback_data: AdminCourseCallback, state: FSMContext
):
    course_id = callback_data.course_id
    await state.set_state(EditCourse.choosing_field)
    await state.update_data(course_id=course_id)

    await callback.message.edit_text(
        "–ö–∞–∫–æ–µ –ø–æ–ª–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?",
        reply_markup=get_edit_field_kb(course_id),
    )
    await callback.answer()


# –û–±—Ä–æ–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@admin_router.callback_query(EditCourseCallback.filter(), EditCourse.choosing_field)
async def choose_field_to_edit(callback: CallbackQuery, callback_data: EditCourseCallback, state: FSMContext):
    await callback.answer()

    field = callback_data.field
    field_names = {
        'title': '–Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ',
        'short_description': '–Ω–æ–≤–æ–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ',
        'full_description': '–Ω–æ–≤–æ–µ –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ',
        'materials_link': '–Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã',
        'price': '–Ω–æ–≤—É—é —Ü–µ–Ω—É'
    }

    await state.update_data(field_to_edit=field)
    await state.set_state(EditCourse.entering_new_value)

    await callback.message.delete()

    await callback.message.answer(
        f"–í–≤–µ–¥–∏—Ç–µ {field_names.get(field, '–Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')}:",
        reply_markup=cancel_kb
    )
    await callback.message.answer("...", reply_markup=cancel_kb)
    await callback.answer()


# –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
@admin_router.message(EditCourse.entering_new_value)
async def process_new_value(message: Message, state: FSMContext):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –ë–î –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å."""
    new_value = message.text
    data = await state.get_data()
    course_id = data.get("course_id")
    field = data.get("field_to_edit")

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–µ–π
    allowed_fields = [
        "title",
        "short_description",
        "full_description",
        "materials_link",
        "price",
    ]
    if field not in allowed_fields:
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–µ–≤–µ—Ä–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.",
            reply_markup=admin_main_kb,
        )
        await state.clear()
        return

    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–Ω—ã
    if field == "price":
        try:
            new_value = float(new_value.replace(",", "."))
        except ValueError:
            await message.answer(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1990.50)."
            )
            return

    # –û–±–Ω–æ–≤–ª–µ–Ω—è–º –ø–æ–ª—è –≤ –±–¥
    await courses_db.update_course_field(course_id, field, new_value)

    await state.clear()
    await message.answer(
        f"‚úÖ –ü–æ–ª–µ **{field}** –¥–ª—è –∫—É—Ä—Å–∞ **ID {course_id}** –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
        reply_markup=admin_main_kb,
        parse_mode="Markdown",
    )

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    await view_course_after_edit(message, course_id)


async def view_course_after_edit(message: Message, course_id: int):
    course = await courses_db.get_course_by_id(course_id)
    if not course:
        return

    _, title, short_desc, full_desc, price, link = course
    text = (
        f"üìñ **–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫—É—Ä—Å**\n\n"
        f"**ID:** {course_id}\n"
        f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {title}\n"
        f"**–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:** {short_desc}\n"
        f"**–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:** {full_desc}\n"
        f"**–¶–µ–Ω–∞:** {price} —Ä—É–±.\n"
        f"**–°—Å—ã–ª–∫–∞:** {link}"
    )

    await message.answer(
        text,
        reply_markup=get_course_manage_kb(course_id),
        parse_mode="Markdown",
        disable_web_page_preview=True,
    )


# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@admin_router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", IsAdmin())
async def show_stats(message: Message):
    stats = await stats_db.get_main_stats()

    text = (
        f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞**\n\n"
        f"üë• **–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:** {stats['users_count']}\n"
        f"üéì **–í—Å–µ–≥–æ –∫—É–ø–ª–µ–Ω–æ –∫—É—Ä—Å–æ–≤:** {stats['purchases_count']}\n"
        f"üí∞ **–£—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π:** {stats['successful_payments_count']} –Ω–∞ —Å—É–º–º—É {stats['total_revenue']:.2f} —Ä—É–±.\n"
        f"üìö **–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ –≤ –±–∞–∑–µ:** {stats['active_courses_count']}"
    )

    await message.answer(text, parse_mode="Markdown")


# –ö–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
USERS_PER_PAGE = 5


async def format_users_list(users: List[Dict]) -> str:
    if not users:
        return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."

    text = "üë• **–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**\n\n"
    for user in users:
        text += (
            f"üë§ **ID:** `{user['user_id']}`\n"
            f"   **–ò–º—è:** {user['full_name']}\n"
            f"   **Username:** @{user['username']}\n"
            f"   **–ö—É–ø–ª–µ–Ω–æ –∫—É—Ä—Å–æ–≤:** {user['courses_purchased']}\n"
            f"--------------------\n"
        )
    return text


# –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@admin_router.message(F.text == "üë• –°–ø–∏—Å–æ–∫ —é–∑–µ—Ä–æ–≤", IsAdmin())
async def list_users(message: Message):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    total_users = await users_db.get_total_users_count()
    users = await users_db.get_paginated_users(limit=USERS_PER_PAGE, offset=0)

    text = await format_users_list(users)

    await message.answer(
        text,
        reply_markup=get_users_pagination_kb(
            offset=0, total_users=total_users, page_size=USERS_PER_PAGE
        ),
        parse_mode="Markdown",
    )


@admin_router.callback_query(UserPaginationCallback.filter())
async def paginate_users_list(
    callback: CallbackQuery, callback_data: UserPaginationCallback
):
    current_offset = callback_data.offset

    if callback_data.action == "next":
        new_offset = current_offset + USERS_PER_PAGE
    else:
        new_offset = current_offset - USERS_PER_PAGE

    total_users = await users_db.get_total_users_count()
    users = await users_db.get_paginated_users(limit=USERS_PER_PAGE, offset=new_offset)

    text = await format_users_list(users)

    await callback.message.edit_text(
        text,
        reply_markup=get_users_pagination_kb(
            offset=new_offset, total_users=total_users, page_size=USERS_PER_PAGE
        ),
        parse_mode="Markdown",
    )
    await callback.answer()
