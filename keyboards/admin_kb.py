from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters.callback_data import CallbackData

admin_main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫—É—Ä—Å"),
            KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤"),
        ],
        [KeyboardButton(text="üë• –°–ø–∏—Å–æ–∫ —é–∑–µ—Ä–æ–≤"), KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        [KeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ")],
    ],
    resize_keyboard=True,
)


cancel_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]], resize_keyboard=True
)

class AdminCourseCallback(CallbackData, prefix="admin_course"):
    action: str
    course_id: int


class AdminCoursePaginationCallback(CallbackData, prefix="admin_course_page"):
    action: str
    offset: int


def get_admin_courses_kb(courses: list, offset: int, total_courses: int, page_size: int):
    builder = InlineKeyboardBuilder()
    for course in courses:
        builder.button(
            text=f"ID: {course[0]} | {course[1]}",
            callback_data=AdminCourseCallback(action="view", course_id=course[0]),
        )

    pagination_buttons = []
    if offset > 0:
        pagination_buttons.append(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data=AdminCoursePaginationCallback(action="prev", offset=offset).pack(),
            )
        )
    if offset + page_size < total_courses:
        pagination_buttons.append(
            InlineKeyboardButton(
                text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è",
                callback_data=AdminCoursePaginationCallback(action="next", offset=offset).pack(),
            )
        )

    builder.row(*pagination_buttons)

    builder.button(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
        callback_data=AdminCourseCallback(action="back_to_main_menu", course_id=0),
    )

    builder.adjust(1)
    return builder.as_markup()


def get_course_manage_kb(course_id: int):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫—É—Ä—Å–∞."""
    builder = InlineKeyboardBuilder()
    builder.button(
        text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
        callback_data=AdminCourseCallback(action="edit", course_id=course_id),
    )
    builder.button(
        text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å",
        callback_data=AdminCourseCallback(action="delete", course_id=course_id),
    )
    builder.button(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É",
        callback_data=AdminCourseCallback(action="back_to_list", course_id=0),
    )
    builder.adjust(2, 1)
    return builder.as_markup()

def get_confirm_delete_kb(course_id: int):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞."""
    builder = InlineKeyboardBuilder()
    builder.button(
        text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å",
        callback_data=AdminCourseCallback(action="confirm_delete", course_id=course_id),
    )
    builder.button(
        text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞",
        callback_data=AdminCourseCallback(action="view", course_id=course_id),
    )
    builder.adjust(2)
    return builder.as_markup()


class EditCourseCallback(CallbackData, prefix="edit_course_field"):
    course_id: int
    field: str


def get_edit_field_kb(course_id: int):
    builder = InlineKeyboardBuilder()
    fields = {
        "title": "–ù–∞–∑–≤–∞–Ω–∏–µ",
        "short_description": "–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
        "full_description": "–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
        "materials_link": "–°—Å—ã–ª–∫–∞ –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã",
        "price": "–¶–µ–Ω–∞",
    }
    for field, name in fields.items():
        builder.button(
            text=name,
            callback_data=EditCourseCallback(course_id=course_id, field=field),
        )
    builder.button(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data=AdminCourseCallback(action="view", course_id=course_id),
    )
    builder.adjust(2, 2, 1)
    return builder.as_markup()

class UserPaginationCallback(CallbackData, prefix="users_page"):
    action: str
    offset: int


def get_users_pagination_kb(
    offset: int, total_users: int, page_size: int
) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()

    if offset > 0:
        builder.button(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=UserPaginationCallback(action="prev", offset=offset),
        )
    if offset + page_size < total_users:
        builder.button(
            text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è",
            callback_data=UserPaginationCallback(action="next", offset=offset),
        )

    return builder.as_markup()
